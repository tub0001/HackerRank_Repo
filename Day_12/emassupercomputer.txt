mport java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int column = sc.nextInt();

        int[][] trackRowMatrix = new int[row][column];
        int[][] trackColumnMatrix = new int[row][column];
        String[] grid = new String[row];
        int max = 0;
        sc.nextLine();
        for (int i = 0; i < row; i++) {
            grid[i] = sc.nextLine();
        }

        for (int i = 0; i < row; i++) {
            if (grid[i].charAt(0) == 'G') {
                trackRowMatrix[i][0] = 1;
            }
        }
        for (int j = 0; j < column; j++) {
            if (grid[0].charAt(j) == 'G') {
                trackColumnMatrix[0][j] = 1;
            }
        }

        for (int i = 0; i < row; i++) {
            for (int j = 1; j < column; j++) {
                if (grid[i].charAt(j) == grid[i].charAt(j - 1) && grid[i].charAt(j) == 'G') {
                    trackRowMatrix[i][j] = trackRowMatrix[i][j - 1] + 1;
                } else {
                    if (grid[i].charAt(j) == 'G') {
                        trackRowMatrix[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 1; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if (grid[i].charAt(j) == grid[i - 1].charAt(j) && grid[i].charAt(j) == 'G') {
                    trackColumnMatrix[i][j] = trackColumnMatrix[i - 1][j] + 1;
                } else {
                    if (grid[i].charAt(j) == 'G') {
                        trackColumnMatrix[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                for (int k = Math.min(trackRowMatrix[i][j], trackColumnMatrix[i][j]); k >= 1; k--) {
                    if (i + k - 1 < row && trackColumnMatrix[i + k - 1][j] - trackColumnMatrix[i][j] == k - 1
                            && j + k - 1 < column && trackRowMatrix[i][j + k - 1] - trackRowMatrix[i][j] == k - 1) {
                        for (int i1 = i; i1 < row; i1++) {
                            for (int j1 = 0; j1 < column; j1++) {
                                for (int k1 = Math.min(trackRowMatrix[i1][j1], trackColumnMatrix[i1][j1]); k1 >= 1; k1--) {

                                    if (i1 + k1 - 1 < row && trackColumnMatrix[i1 + k1 - 1][j1] - trackColumnMatrix[i1][j1] == k1 - 1
                                            && j1 + k1 - 1 < column && trackRowMatrix[i1][j1 + k1 - 1] - trackRowMatrix[i1][j1] == k1 - 1 && (i1 != i || j1 != j)) {
                                        boolean [][]flag = new boolean[row][column];
                                        boolean canFound = true;
                                        for(int index = k - 1; index >= 1; index --)
                                        {
                                            flag[i+index][j] = true;
                                            flag[i-index][j] = true;
                                            flag[i][j+index] = true;
                                            flag[i][j-index] = true;
                                        }
                                        flag[i][j] = true;
                                        for(int index = k1 - 1; index>=1;index--)
                                        {
                                            if(flag[i1+index][j1] ||flag[i1-index][j1]||flag[i1][j1+index]||flag[i1][j1-index])
                                            {
                                                canFound = false;
                                            }
                                        }
                                        if(canFound)
                                        {
                                            int temp = ((k1 - 1) * 4 + 1) *((k - 1) * 4 + 1);
                                            if(temp > max)
                                                max = temp;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
           
        }
         System.out.println(max);

    }
}