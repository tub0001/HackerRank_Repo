import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the minimumAverage function below.
     */
    static long minimumAverage(int[][] allCustomers) {
        Customer[] customers = new Customer[allCustomers.length];
        for (int i = 0; i < customers.length; i++) {
            int orderTime = allCustomers[i][0];
            int cookTime = allCustomers[i][1];
            customers[i] = new Customer(orderTime, cookTime);
        }
        Arrays.sort(customers, (c1, c2) -> c1.orderTime - c2.orderTime);

        MinHeap waitings = new MinHeap();
        long currentTime = 0;
        long totalWaitingTime = 0;
        int index = 0;
        while (!waitings.isEmpty() || index < customers.length) {
            while (index < customers.length
                    && customers[index].orderTime <= currentTime) {
                waitings.add(customers[index]);
                index++;
            }
            if (waitings.isEmpty()) {
                currentTime = customers[index].orderTime;
                continue;
            }

            Customer served = waitings.removeTop();
            currentTime += served.cookTime;
            totalWaitingTime += currentTime - served.orderTime;
        }
        return (totalWaitingTime / customers.length);

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])*");

        int[][] customers = new int[n][2];

        for (int customersRowItr = 0; customersRowItr < n; customersRowItr++) {
            String[] customersRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])*");

            for (int customersColumnItr = 0; customersColumnItr < 2; customersColumnItr++) {
                int customersItem = Integer.parseInt(customersRowItems[customersColumnItr]);
                customers[customersRowItr][customersColumnItr] = customersItem;
            }
        }

        long result = minimumAverage(customers);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}

class Customer {
    int orderTime;
    int cookTime;

    Customer(int orderTime, int cookTime) {
        this.orderTime = orderTime;
        this.cookTime = cookTime;
    }
}

class MinHeap {
    List<Customer> customers = new ArrayList<Customer>();

    private void swap(int index1, int index2) {
        Customer temp = customers.get(index1);
        customers.set(index1, customers.get(index2));
        customers.set(index2, temp);
    }

    void add(Customer customer) {
        customers.add(customer);

        int childIndex = customers.size() - 1;
        while (true) {
            int parentIndex = (childIndex - 1) / 2;

            if (parentIndex < 0
                    || customers.get(parentIndex).cookTime <= customers
                            .get(childIndex).cookTime) {
                break;
            }

            swap(parentIndex, childIndex);
            childIndex = parentIndex;
        }
    }

    Customer removeTop() {
        Customer top = customers.get(0);

        swap(0, customers.size() - 1);
        customers.remove(customers.size() - 1);

        int parentIndex = 0;
        while (true) {
            int leftChildIndex = parentIndex * 2 + 1;
            int rightChildIndex = parentIndex * 2 + 2;

            if ((leftChildIndex >= customers.size() || customers
                    .get(parentIndex).cookTime <= customers.get(leftChildIndex).cookTime)
                    && (rightChildIndex >= customers.size() || customers
                            .get(parentIndex).cookTime <= customers
                            .get(rightChildIndex).cookTime)) {
                break;
            }

            int childIndex;
            if (rightChildIndex >= customers.size()
                    || customers.get(leftChildIndex).cookTime <= customers
                            .get(rightChildIndex).cookTime) {
                childIndex = leftChildIndex;
            } else {
                childIndex = rightChildIndex;
            }
            swap(parentIndex, childIndex);
            parentIndex = childIndex;
        }

        return top;
    }

    boolean isEmpty() {
        return customers.isEmpty();
    }
}